name: Static_Analyzed_Compilation

on:
  push:
    branches: '**'
  pull_request:
    branches: [ $default-branch ]

jobs:
  Setup_CMake :
  # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
    
    - name : Download headers
      run : sudo apt-get install xorg-dev libglu1-mesa-dev
      if: ${{ runner.os == 'Linux' }}

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON 
          cmake -B ${{github.workspace}}/build

    - uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: CMakeLogs_Configure
        path: ${{github.workspace}}/build/CMakeFiles/*.log

    - name: Build the game
      if: ${{ success() }}
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build

    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: CMakeLogs_Build
        path: ${{github.workspace}}/build/CMakeFiles/*.log

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

Static_Analysis :
  # Using CPP Check on Linux (will have to tinker for Windows)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
    
    - name : Download headers
      run : sudo apt-get install cppcheck
      if: ${{ runner.os == 'Linux' }}

    - name: Use the checker
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cppcheck --output-file=static_check.txt --project=compile_commands.json

    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: Static_Check_Output
        path: ${{github.workspace}}/static_check.txt